version: 2
jobs:
  build:
    working_directory: ~/twitter
    docker:
    - image: circleci/php:7.2.4-apache-stretch-node-browsers
      environment:
        APP_ENV: test
        DATABASE_URL: mysql://root:root@127.0.0.1/twitter
        MAILER_FROM: srk@srk.com
        MAILER_URL: null://localhost
    - image: circleci/mysql:5.7
      environment:
        MYSQL_ROOT_PASSWORD: 'root'
        MYSQL_DATABASE: twitter
    steps:
      - checkout
      - run:
          name: Install apt
          command: sudo apt-get install -y zlib1g-dev
      - run:
          name: Install PHP MySQL
          command: sudo docker-php-ext-install pdo_mysql zip
      - run:
          name: Wait for MySQL
          command: dockerize -wait tcp:/127.0.0.1:3600 -timeout 120s
      - run:
          name: Composer
          command: sudo composer self-update
      - run:
          name: Composer install
          command: composer install -n --prefer-dist
      - run:
          name: Run migrations
          command: php bin/console doctrine:migrations:migrate --env=test --no-interaction
      - run:
          name: Run tests
          command: ./bin/phpunit
#  - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
#    - run: sudo docker-php-ext-install zip
#
#    # Download and cache dependencies
#    - restore_cache:
#        keys:
#        # "composer.lock" can be used if it is committed to the repo
#        - v1-dependencies-{{ checksum "composer.json" }}
#        # fallback to using the latest cache if no exact match is found
#        - v1-dependencies-
#
#    - run: composer install -n --prefer-dist
#
#    - save_cache:
#        key: v1-dependencies-{{ checksum "composer.json" }}
#        paths:
#        - ./vendor
#    - restore_cache:
#        keys:
#        - node-v1-{{ checksum "package.json" }}
#        - node-v1-
#    - run: yarn install
#    - save_cache:
#        key: node-v1-{{ checksum "package.json" }}
#        paths:
#        - node_modules
#
#    # prepare the database
#    - run: touch storage/testing.sqlite
#    - run: php artisan migrate --env=testing --database=sqlite_testing --force
#
#    # run tests with phpunit or codecept
#    #- run: ./vendor/bin/phpunit
#    - run: ./vendor/bin/codecept build
#    - run: ./vendor/bin/codecept run